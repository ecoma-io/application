networks:
  ecomma:
    name: ecomma-dev
    driver: bridge
    ipam:
      config:
        - subnet: 10.10.0.0/16
          gateway: 10.10.1.1

services:
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - 443:443
      - 80:80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../.certs:/certs:ro
      - ../docs:/docs:ro
    extra_hosts:
      - host.docker.internal:host-gateway
    networks:
      ecomma:
        ipv4_address: 10.10.10.1
    healthcheck:
      test: ['CMD', 'wget', '-q', '--spider', '--no-check-certificate', 'https://127.0.0.1']
      interval: 5s
      timeout: 8s
      retries: 10
      start_period: 10s

  maildev:
    image: maildev/maildev@sha256:180ef51f65eefebb0e7122d8308813c1fd7bff164bc440ce5a3c2feee167a810
    container_name: maildev
    restart: always
    ports:
      - '1025:1025' # SMTP Server
    networks:
      ecomma:
        ipv4_address: 10.10.10.2
    healthcheck:
      test: ['CMD', 'wget', '-q', '--spider', 'http://localhost:1080']
      interval: 5s
      timeout: 8s
      retries: 10
      start_period: 10s

  minio:
    image: minio/minio@sha256:a616cd8f37758b0296db62cc9e6af05a074e844cc7b5c0a0e62176d73828d440
    container_name: minio
    restart: always
    ports:
      - '9000:9000' # API S3
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_SERVER_URL: https://s3.fbi.com
      MINIO_BROWSER_REDIRECT_URL: https://minio.fbi.com
    command: server /data --console-address ":9091"
    networks:
      ecomma:
        ipv4_address: 10.10.10.3
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 5s
      timeout: 8s
      retries: 10
      start_period: 10s

  minio-mc:
    image: minio/mc@sha256:09f93f534cde415d192bb6084dd0e0ddd1715fb602f8a922ad121fd2bf0f8b44
    container_name: minio-mc
    restart: always
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 minioadmin minioadmin;
      mc ls minio/assets || mc mb minio/assets;
      mc anonymous set public minio/assets;
      mc ls minio/private || mc mb minio/private;
      mc anonymous set none minio/private;
      echo 'Bucket created!';
      sleep infinity;
      "
  mongodb:
    image: mongo:4@sha256:52c42cbab240b3c5b1748582cc13ef46d521ddacae002bbbda645cebed270ec0
    container_name: mongodb
    restart: always
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: database
    networks:
      ecomma:
        ipv4_address: 10.10.10.5
    healthcheck:
      test: ['CMD', 'mongo', '--eval', "db.runCommand('ping').ok"]
      interval: 5s
      timeout: 8s
      retries: 10
      start_period: 10s

  mongo-express:
    image: mongo-express:1.0.2@sha256:1b23d7976f0210dbec74045c209e52fbb26d29b2e873d6c6fa3d3f0ae32c2a64
    container_name: mongo-express
    restart: always
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://user:password@mongodb:27017
      ME_CONFIG_MONGODB_ENABLE_ADMIN: true
      ME_CONFIG_BASICAUTH: false
      ME_CONFIG_BASICAUTH_ENABLED: false
      VCAP_APP_HOST: 0.0.0.0
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      ecomma:
        ipv4_address: 10.10.10.6

  rabbitmq:
    image: rabbitmq:3-management-alpine@sha256:874ef09f18e6d9f0ba70370d593a492c90f43e569c1fc11365de3a9c732f7e94
    container_name: rabbitmq
    restart: always
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      ecomma:
        ipv4_address: 10.10.10.8
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 8s
      retries: 10
      start_period: 10s

  redis:
    image: redis:7-alpine@sha256:ee9e8748ace004102a267f7b8265dab2c618317df22507b89d16a8add7154273
    container_name: redis
    restart: always
    ports:
      - '6379:6379'
    networks:
      ecomma:
        ipv4_address: 10.10.10.9
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis-commander:
    image: rediscommander/redis-commander:latest@sha256:19cd0c49f418779fa2822a0496c5e6516d0c792effc39ed20089e6268477e40a
    container_name: redis-commander
    restart: always
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      ecomma:
        ipv4_address: 10.10.10.10
    healthcheck:
      test: ['CMD', 'wget', '--spider', '--quiet', 'http://127.0.0.1:8081']
      interval: 5s
      timeout: 8s
      retries: 10
      start_period: 10s
